---------------------------------------------------------
Day 1
---------------------------------------------------------
Part I
- Find two numbers from input that when summed equals 2020
- Multiple those two numbers as an output

Part II
- Make it three numbers instead of two


---------------------------------------------------------
Day 2
---------------------------------------------------------
Part I
- List of of passwords and some of them don't follow policy
- Format is <min>-<max> <char> <password> 
--- Character must appear in the password at minimum <min> times and maximum <max> of times

Part II
- Format <pos1>-<pos2> <char> <password>
-- the character must exist in position 1, and not position 2 in the password


---------------------------------------------------------
Day 3
---------------------------------------------------------
Part I
- .=open #=tree
- Given a map that will repeat horizontally
- Calculate the number of trees given a slope (x,y) movements

Part II
- Calculation tree collusions for a list of slopes

---------------------------------------------------------
Day 4
---------------------------------------------------------
Part I
- detecting which passports have all required fields
- key:value pairs seperated by spaces or newline
- Passports are seperated by blank lines
- cid not required

Part II
- Validation Rules by field now


---------------------------------------------------------
Day 5
---------------------------------------------------------
Part I
- list of all boarding pass codes near you and figure out what seat isn't taken
--- F:front B:back L:left R:right
--- first 7 chars will just be F or B 
--- 128 rows on the plane (0-127)
--- 8 columns (0-7)
- FBFBBFFRLR ==> FBFBBFF for rows and RLR for columns
-- Cutting each one in half eveyr time a choice is made
-- Start:(0-127) => F:(0-63) => B:(32-63) => F:(62-47) => B:(40-47) => B:(44-47) => F(44-45) => F(44)
-- Start(0-7) => R:(4-7) => L:(4-5) => R(5)
-- row:44 col:5 ==> row * 8 * col == seat number ==> 357

Part II
- Sold out flight so find missing seat by process of elimination of missing ids from your seat


---------------------------------------------------------
Day 6
---------------------------------------------------------
- list of all answers per person a-z, each character means they answered 'yes' to that question out of 26 possible questions
- Groups seperate by blank line, people seperated by new line
- For each group how many questions did they answer yes to. 
--- abc ==> 3 because a single person of one group and so all answers match
--- all a's => 1
--- a, or b, or c ==> 3 since they had 3 different questions they all said yes to. 


Part II
- Sum all the questions per group they agreed to 
--- abc ==> 3 because a single person of one group and so all answers match
--- all a's => 1
--- a, or b, or c ==> 0 since they could not agree on any questions 

---------------------------------------------------------
Day 7
---------------------------------------------------------
Part I
- each line is a bag color and what (and how many) bags it can contain
- determine how much of the bags can contain a 'shiny gold' bag

Part II
- given a shiny gold back how many bags does it contain

---------------------------------------------------------
Day 8
---------------------------------------------------------
Part I
- acc adjust accumulator by the vaglue given ==> acc +7 would go from 0 to 6, and executes that next command
- jmp humps to a new intruction (relative to itself) ==> jmp +2 would skip over 1
- nop is no operation, instruction below it runs. 

Part II
- 
-